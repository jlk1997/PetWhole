"use strict";var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,n=(t,r,a)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[r]=a,o=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&n(e,r,t[r]);if(a)for(var r of a(t))i.call(t,r)&&n(e,r,t[r]);return e},l=(e,a)=>t(e,r(a)),d=(e,t,r)=>new Promise(((a,s)=>{var i=e=>{try{o(r.next(e))}catch(t){s(t)}},n=e=>{try{o(r.throw(e))}catch(t){s(t)}},o=e=>e.done?a(e.value):Promise.resolve(e.value).then(i,n);o((r=r.apply(e,t)).next())}));const c=require("../common/vendor.js");require("../utils/api.js");const h=require("../utils/request.js"),u=c.defineStore("marker",{state:()=>({markers:[],userMarkers:[],loading:!1,error:null,currentMarker:null,selectedMarker:null,markerCache:{data:[],timestamp:null,location:null},pagination:{page:1,limit:20,total:0,pages:0}}),getters:{allMarkers:e=>e.markers,isLoading:e=>e.loading,getError:e=>e.error},actions:{fetchNearbyMarkers(e){return d(this,arguments,(function*({longitude:e,latitude:t,radius:r=5e3}){var a,s;try{this.loading=!0,console.log("正在获取附近标记...");if(this.checkCacheValidity({longitude:e,latitude:t})){console.log("使用缓存的标记数据");const a=this.filterMarkersByDistance(this.markerCache.data,{latitude:t,longitude:e,radius:r});return this.markers=a,this.loading=!1,a}let a=2,s=null,n=0;for(;a>=0;)try{let a="/api/markers",s={};switch(n){case 0:s={longitude:e,latitude:t,radius:r},console.log("尝试标准地理空间查询");break;case 1:s={longitude:e,latitude:t,radius:r,queryMode:"geoWithin"},console.log("尝试使用geoWithin查询模式");break;case 2:const i=r/111e3,n=r/(111e3*Math.cos(t*Math.PI/180));s={minLat:t-i,maxLat:t+i,minLng:e-n,maxLng:e+n,useRectQuery:!0},console.log("尝试使用矩形区域查询");break;case 3:a="/api/markers/all",console.log("尝试获取所有标记");break;case 4:console.log("尝试无参数请求获取标记");break;case 5:return a="/api/markers/search",yield this.fetchMarkersByPost({longitude:e,latitude:t,radius:r})}const i=yield h.request({url:a,method:"GET",params:s,timeout:1e4});console.log("获取标记响应:",i);let o=[],l=this.pagination;return i.data?(o=i.data.data||i.data,l=i.data.pagination||this.pagination):o=i||[],n>=3&&o.length>0&&(console.log("在前端筛选附近标记"),o=this.filterMarkersByDistance(o,{latitude:t,longitude:e,radius:r})),this.updateMarkerCache(o,{longitude:e,latitude:t}),this.markers=o,this.pagination=l,this.loading=!1,console.log(`成功使用策略${n}获取到${o.length}个标记`),o}catch(i){s=i,console.warn(`获取标记失败，使用策略${n}失败，剩余重试次数: ${a}`,i),n++,n>5&&(n=0,a--),a>=0&&(yield new Promise((e=>setTimeout(e,1e3))))}if(this.markerCache.data&&this.markerCache.data.length>0){console.log("所有API策略失败，使用过期缓存数据");const a=this.filterMarkersByDistance(this.markerCache.data,{latitude:t,longitude:e,radius:2*r});if(a.length>0)return this.markers=a,this.loading=!1,c.index.showToast({title:"使用缓存数据，可能不是最新",icon:"none",duration:2e3}),a}throw s}catch(i){return console.error("获取附近标记失败:",i),this.error=(null==(s=null==(a=i.response)?void 0:a.data)?void 0:s.message)||"获取标记失败",this.loading=!1,this.markers=[],c.index.showToast({title:"服务器暂时不可用，请稍后再试",icon:"none",duration:3e3}),[]}}))},fetchUserMarkers(e){return d(this,null,(function*(){var t,r;try{this.loading=!0;const t=yield h.request({url:`/api/markers/user/${e}`,method:"GET"});let r=[];return r=t.data?t.data.data||t.data:t||[],this.userMarkers=r,this.loading=!1,r}catch(a){return console.error("获取用户标记失败:",a),this.error=(null==(r=null==(t=a.response)?void 0:t.data)?void 0:r.message)||"获取用户标记失败",this.loading=!1,c.index.showToast({title:"获取用户标记失败，请检查网络",icon:"none",duration:2e3}),[]}}))},createMarker(e){return d(this,null,(function*(){var t,r;try{this.loading=!0,console.log("正在创建新标记，数据:",e);let t=o({},e);if(e.images&&e.images.length>0&&(console.log("标记包含图片数据:",e.images.length,"张图片"),t.images=e.images.map((e=>({url:e.url,caption:e.caption||""})))),!t.latitude||!t.longitude)throw console.error("标记缺少位置信息"),new Error("标记位置信息不完整");const r=yield h.request({url:"/api/markers",method:"POST",data:t});console.log("新标记创建响应:",r);let a=r.data||r;if(a&&(a.data||a._id)){const e=a.data||a;e&&!e._id&&(e._id="marker_"+Date.now()),e&&!e.createdAt&&(e.createdAt=new Date),!e||e.latitude&&e.longitude||(e.latitude=t.latitude,e.longitude=t.longitude),this.markers&&Array.isArray(this.markers)?this.markers.unshift(e):this.markers=[e],this.userMarkers&&Array.isArray(this.userMarkers)&&this.userMarkers.unshift(e),this.updateMarkerCache(this.markers,{latitude:e.latitude,longitude:e.longitude}),this.notifyMarkersUpdated(),this.setCurrentMarker(e)}return this.loading=!1,a}catch(a){throw console.error("创建标记失败:",a),this.error=(null==(r=null==(t=a.response)?void 0:t.data)?void 0:r.message)||a.message||"创建标记失败",this.loading=!1,a}}))},updateMarker(e){return d(this,arguments,(function*({id:e,data:t}){var r,a,s,i;try{this.loading=!0;const r=yield h.request({url:`/api/markers/${e}`,method:"PUT",data:t});let a={};a=r.data?r.data.data||r.data:r||{};const s=this.markers.findIndex((e=>e._id===a._id));-1!==s&&(this.markers[s]=a);const i=this.userMarkers.findIndex((e=>e._id===a._id));return-1!==i&&(this.userMarkers[i]=a),this.selectedMarker&&this.selectedMarker._id===a._id&&(this.selectedMarker=a),this.currentMarker&&this.currentMarker._id===a._id&&(this.currentMarker=a),this.clearAllMarkerCache(),this.notifyMarkersUpdated(),this.loading=!1,c.index.showToast({title:"标记更新成功",icon:"success"}),a}catch(n){return console.error("更新标记失败:",n),this.error=(null==(a=null==(r=n.response)?void 0:r.data)?void 0:a.message)||"更新标记失败",this.loading=!1,c.index.showToast({title:(null==(i=null==(s=n.response)?void 0:s.data)?void 0:i.message)||"更新标记失败，请检查网络",icon:"none"}),null}}))},deleteMarker(e){return d(this,null,(function*(){var t,r,a,s;try{this.loading=!0,console.log("正在删除标记:",e);let t=2,r=null;for(;t>=0;)try{const t=yield h.request({url:`/api/markers/${e}`,method:"DELETE",timeout:15e3});return console.log("删除标记响应:",t),this.markers=this.markers.filter((t=>t._id!==e)),this.userMarkers=this.userMarkers.filter((t=>t._id!==e)),this.selectedMarker&&this.selectedMarker._id===e&&(this.selectedMarker=null),this.currentMarker&&this.currentMarker._id===e&&(this.currentMarker=null),this.clearAllMarkerCache(),this.loading=!1,this.notifyMarkersUpdated(),c.index.showToast({title:"标记已删除",icon:"success"}),!0}catch(i){r=i,console.warn(`删除标记失败，剩余重试次数: ${t}`,i),t--,t>=0&&(yield new Promise((e=>setTimeout(e,1e3))))}throw r}catch(i){return console.error("删除标记失败:",i),this.error=(null==(r=null==(t=i.response)?void 0:t.data)?void 0:r.message)||"删除标记失败",this.loading=!1,c.index.showToast({title:(null==(s=null==(a=i.response)?void 0:a.data)?void 0:s.message)||"删除标记失败，请检查网络",icon:"none"}),!1}}))},fetchMarkerById(e){return d(this,null,(function*(){var t,r;try{this.loading=!0;const t=yield h.request({url:`/api/markers/${e}`,method:"GET"});let r={};return r=t.data?t.data.data||t.data:t||{},this.selectedMarker=r,this.loading=!1,r}catch(a){return console.error("获取标记详情失败:",a),this.error=(null==(r=null==(t=a.response)?void 0:t.data)?void 0:r.message)||"获取标记详情失败",this.loading=!1,null}}))},likeMarker(e){return d(this,null,(function*(){var t,r;try{const t=yield h.request({url:`/api/markers/${e}/like`,method:"POST"});let r=[];t.data?r=t.data.likes||t.likes||[]:t.likes&&(r=t.likes);const a=this.markers.findIndex((t=>t._id===e));if(-1!==a){const e=o({},this.markers[a]);e.likes=r,this.markers[a]=e}const s=this.userMarkers.findIndex((t=>t._id===e));if(-1!==s){const e=o({},this.userMarkers[s]);e.likes=r,this.userMarkers[s]=e}return this.selectedMarker&&this.selectedMarker._id===e&&(this.selectedMarker=l(o({},this.selectedMarker),{likes:r})),t}catch(a){return console.error("点赞标记失败:",a),c.index.showToast({title:(null==(r=null==(t=a.response)?void 0:t.data)?void 0:r.message)||"点赞失败",icon:"none"}),null}}))},unlikeMarker(e){return d(this,null,(function*(){var t,r;try{const t=yield h.request({url:`/api/markers/${e}/unlike`,method:"POST"});let r=[];t.data?r=t.data.likes||t.likes||[]:t.likes&&(r=t.likes);const a=this.markers.findIndex((t=>t._id===e));if(-1!==a){const e=o({},this.markers[a]);e.likes=r,this.markers[a]=e}const s=this.userMarkers.findIndex((t=>t._id===e));if(-1!==s){const e=o({},this.userMarkers[s]);e.likes=r,this.userMarkers[s]=e}return this.selectedMarker&&this.selectedMarker._id===e&&(this.selectedMarker=l(o({},this.selectedMarker),{likes:r})),t}catch(a){return console.error("取消点赞标记失败:",a),c.index.showToast({title:(null==(r=null==(t=a.response)?void 0:t.data)?void 0:r.message)||"取消点赞失败",icon:"none"}),null}}))},setCurrentMarker(e){this.currentMarker=e},setSelectedMarker(e){this.selectedMarker=e},clearError(){this.error=null},filterMarkersByDistance(e,t){if(!e||!e.length)return[];if(!t||void 0===t.latitude)return e;const{latitude:r,longitude:a,radius:s}=t,i=e.filter((e=>{if(!e.latitude||!e.longitude){if(!e.location||!e.location.coordinates)return!1;e.longitude=e.location.coordinates[0],e.latitude=e.location.coordinates[1]}const t=this.calculateDistance(r,a,e.latitude,e.longitude);return e.distance=t,t<=s}));return i.sort(((e,t)=>e.distance-t.distance)),i},calculateDistance(e,t,r,a){const s=this.toRadians(r-e),i=this.toRadians(a-t),n=Math.sin(s/2)*Math.sin(s/2)+Math.cos(this.toRadians(e))*Math.cos(this.toRadians(r))*Math.sin(i/2)*Math.sin(i/2);return 6371e3*(2*Math.atan2(Math.sqrt(n),Math.sqrt(1-n)))},toRadians:e=>e*Math.PI/180,fetchMarkersByPost(e){return d(this,null,(function*(){try{console.log("使用POST请求获取标记");const t=yield h.request({url:"/api/markers/search",method:"POST",data:e,timeout:15e3});let r=[];return r=t.data?t.data.data||t.data:t||[],r.length>0&&this.updateMarkerCache(r,{longitude:e.longitude,latitude:e.latitude}),r}catch(t){throw console.error("POST请求获取标记失败:",t),t}}))},checkCacheValidity({longitude:e,latitude:t}){if(!this.markerCache.data||0===this.markerCache.data.length)return!1;const r=Date.now()-(this.markerCache.timestamp||0)<18e5;let a=!1;if(this.markerCache.location){a=this.calculateDistance(t,e,this.markerCache.location.latitude,this.markerCache.location.longitude)<2e3}return r&&a},updateMarkerCache(e,t){if(e&&e.length){this.markerCache={data:[...e],timestamp:Date.now(),location:o({},t)},console.log("更新了标记缓存，共",e.length,"个标记");try{c.index.setStorageSync("markerCache",JSON.stringify(this.markerCache))}catch(r){console.error("保存标记缓存失败:",r)}}},restoreMarkerCache(){try{const e=c.index.getStorageSync("markerCache");e&&(this.markerCache=JSON.parse(e),console.log("已恢复标记缓存，时间:",new Date(this.markerCache.timestamp)))}catch(e){console.error("恢复标记缓存失败:",e)}},clearAllMarkerCache(){console.log("清除所有标记缓存"),this.markerCache={data:[],timestamp:null,location:null};try{c.index.removeStorageSync("markerCache")}catch(e){console.error("清除本地存储缓存失败:",e)}},notifyMarkersUpdated(){c.index.$emit("markers-updated",{timestamp:Date.now()}),console.log("已发出标记更新通知")}}});exports.useMarkerStore=u;
