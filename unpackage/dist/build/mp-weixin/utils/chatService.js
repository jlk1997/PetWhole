"use strict";var e=Object.defineProperty,s=Object.defineProperties,t=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable,r=(s,t,i)=>t in s?e(s,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[t]=i,o=(e,s)=>{for(var t in s||(s={}))a.call(s,t)&&r(e,t,s[t]);if(i)for(var t of i(s))n.call(s,t)&&r(e,t,s[t]);return e},c=(e,i)=>s(e,t(i)),h=(e,s,t)=>new Promise(((i,a)=>{var n=e=>{try{o(t.next(e))}catch(s){a(s)}},r=e=>{try{o(t.throw(e))}catch(s){a(s)}},o=e=>e.done?i(e.value):Promise.resolve(e.value).then(n,r);o((t=t.apply(e,s)).next())}));const l=require("../common/vendor.js"),g=require("./api.js");require("../config/index.js");const u=new class{constructor(){this.messageCaches={nearby:[],city:[]},this.messageQueue=[],this.isProcessingQueue=!1,this.loadingStates={nearby:!1,city:!1},this.pagination={nearby:{page:1,limit:20,total:0},city:{page:1,limit:20,total:0}},this.networkStatus={isOnline:!0,lastChecked:Date.now()},this.checkNetworkStatus(),l.index.onNetworkStatusChange((e=>{this.handleNetworkChange(e.isConnected)}))}getNearbyMessages(){return h(this,arguments,(function*(e={}){try{this.loadingStates.nearby=!0,console.log("chatService开始获取附近消息, 参数:",e);const s=c(o({},e),{page:e.page||this.pagination.nearby.page,limit:e.limit||this.pagination.nearby.limit}),t=yield g.api.chat.getNearbyMessages(s);console.log("chatService获取到附近消息raw响应:",t),t&&t.pagination&&(this.pagination.nearby=t.pagination);let i=[];if(t&&t.data?i=t.data:Array.isArray(t)&&(i=t),console.log("chatService处理后的消息数据:",i),1===s.page)this.messageCaches.nearby=[...i];else{const e=this.messageCaches.nearby.map((e=>e.id)),s=i.filter((s=>!e.includes(s.id)));this.messageCaches.nearby=[...this.messageCaches.nearby,...s]}return this.messageCaches.nearby.length>50&&(this.messageCaches.nearby=this.messageCaches.nearby.slice(-50)),i}catch(s){if(console.error("获取附近消息失败:",s),this.isNetworkError(s)&&this.messageCaches.nearby.length>0)return console.log("使用缓存的附近消息"),this.messageCaches.nearby;throw s}finally{this.loadingStates.nearby=!1}}))}getCityMessages(){return h(this,arguments,(function*(e={}){try{if(this.loadingStates.city=!0,console.log("chatService开始获取城市消息, 参数:",e),!e.cityName)return console.error("城市名称不能为空"),[];const s=c(o({},e),{page:e.page||this.pagination.city.page,limit:e.limit||this.pagination.city.limit}),t=yield g.api.chat.getCityMessages(s);console.log("chatService获取到城市消息raw响应:",t),t&&t.pagination&&(this.pagination.city=t.pagination);let i=[];if(t&&t.data?i=t.data:Array.isArray(t)&&(i=t),console.log("chatService处理后的城市消息数据:",i),1===s.page)this.messageCaches.city=[...i];else{const e=this.messageCaches.city.map((e=>e.id)),s=i.filter((s=>!e.includes(s.id)));this.messageCaches.city=[...this.messageCaches.city,...s]}return this.messageCaches.city.length>50&&(this.messageCaches.city=this.messageCaches.city.slice(-50)),i}catch(s){if(console.error("获取城市消息失败:",s),this.isNetworkError(s)&&this.messageCaches.city.length>0)return console.log("使用缓存的城市消息"),this.messageCaches.city;throw s}finally{this.loadingStates.city=!1}}))}sendNearbyMessage(e){return h(this,null,(function*(){return this.sendMessage("nearby",e)}))}sendCityMessage(e){return h(this,null,(function*(){return this.sendMessage("city",e)}))}sendMessage(e,s){return h(this,null,(function*(){const t={id:"temp-"+Date.now()+"-"+Math.floor(1e3*Math.random()),content:s.content,createTime:(new Date).getTime(),status:"sending",type:e,data:s,retryCount:0};return this.messageQueue.push(t),this.isProcessingQueue||this.processMessageQueue(),t}))}processMessageQueue(){return h(this,null,(function*(){if(0!==this.messageQueue.length&&!this.isProcessingQueue){if(this.isProcessingQueue=!0,!this.networkStatus.isOnline)return console.log("网络离线，暂停处理消息队列"),void(this.isProcessingQueue=!1);try{const e=this.messageQueue[0];let s;"nearby"===e.type?s=yield g.api.chat.sendNearbyMessage(e.data):"city"===e.type&&(s=yield g.api.chat.sendCityMessage(e.data)),s&&(console.log("消息发送成功:",s),this.messageQueue.shift(),this.updateMessageStatus(e.id,"sent",s))}catch(e){console.error("发送消息失败:",e);const s=this.messageQueue[0];s.retryCount++,s.retryCount>=3?(console.log(`消息 ${s.id} 重试失败 ${s.retryCount} 次，放弃重试`),this.messageQueue.shift(),this.updateMessageStatus(s.id,"failed")):console.log(`消息 ${s.id} 发送失败，将在 2000ms 后重试 (${s.retryCount}/3)`)}finally{this.isProcessingQueue=!1,this.messageQueue.length>0&&setTimeout((()=>{this.processMessageQueue()}),2e3)}}}))}updateMessageStatus(e,s,t=null){console.log("消息状态更新:",e,s,t),l.index.$emit("chat:message-status-update",{messageId:e,status:s,serverData:t})}isNetworkError(e){var s,t,i;return(null==(s=e.message)?void 0:s.includes("网络"))||(null==(t=e.message)?void 0:t.includes("Network"))||(null==(i=e.message)?void 0:i.includes("timeout"))||0===e.statusCode||!this.networkStatus.isOnline}checkNetworkStatus(){l.index.getNetworkType({success:e=>{const s="none"!==e.networkType;this.handleNetworkChange(s)}})}handleNetworkChange(e){const s=this.networkStatus.isOnline;this.networkStatus.isOnline=e,this.networkStatus.lastChecked=Date.now(),console.log("网络状态更新:",e?"在线":"离线"),!s&&e&&(console.log("网络已恢复，重新处理消息队列"),setTimeout((()=>{this.processMessageQueue()}),1e3)),l.index.$emit("chat:network-status-change",{isOnline:e})}};exports.chatService=u;
