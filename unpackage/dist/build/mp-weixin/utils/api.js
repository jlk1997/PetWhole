"use strict";var e=Object.defineProperty,o=Object.defineProperties,t=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,n=(o,t,r)=>t in o?e(o,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[t]=r,l=(e,o)=>{for(var t in o||(o={}))s.call(o,t)&&n(e,t,o[t]);if(r)for(var t of r(o))a.call(o,t)&&n(e,t,o[t]);return e},i=(e,r)=>o(e,t(r)),c=(e,o,t)=>new Promise(((r,s)=>{var a=e=>{try{l(t.next(e))}catch(o){s(o)}},n=e=>{try{l(t.throw(e))}catch(o){s(o)}},l=e=>e.done?r(e.value):Promise.resolve(e.value).then(a,n);l((t=t.apply(e,o)).next())}));const u=require("../common/vendor.js"),d=require("./request.js"),g=require("../config/index.js").config.BASE_API_URL,p=(new Date(Date.now()-1728e5).toISOString(),new Date(Date.now()-1728e5+27e5).toISOString(),new Date(Date.now()-864e5).toISOString(),new Date(Date.now()-864e5+18e5).toISOString(),e=>(console.log("原始API响应:",e),e?e.data&&!e.data.data?(console.log("返回data字段:",e.data),e.data):e.data&&e.data.data?(console.log("返回嵌套data.data字段:",e.data.data),e.data.data):void 0!==e.code&&e.data?(console.log("返回标准API格式:",e.data),e.data):(console.log("返回原始响应"),e):null)),m=e=>c(exports,null,(function*(){try{const o=yield e();return null==o?(console.warn("API调用返回空结果"),[]):o}catch(o){if(console.error("API调用失败:",o),404===o.statusCode){if(console.error("API端点不存在:",o.url),console.error("这可能是因为后端尚未实现此功能，请联系开发者"),o.url&&(o.url.includes("/api/walks")?console.error("遛狗API端点不存在: /api/walks，尝试使用此路径失败"):o.url.includes("/api/users/me/walks")&&console.error("遛狗API端点不存在: /api/users/me/walks，尝试使用此路径失败")),o.url&&(o.url.includes("/walks")||o.url.includes("/posts")))return console.warn("返回空数组以避免UI崩溃"),[]}else if(401===o.statusCode)try{let e="";if("function"==typeof getCurrentPages){const o=getCurrentPages();if(o&&o.length>0){const t=o[o.length-1];e=(null==t?void 0:t.route)||""}}e.includes("/login/")||u.index.navigateTo({url:"/pages/login/login"})}catch(t){console.error("页面跳转错误:",t)}throw o}})),h=(e,o)=>c(exports,null,(function*(){try{console.log("仅使用真实API，禁用模拟数据");return yield e()}catch(o){throw console.error("API调用失败，不使用模拟数据:",o),o}})),f={login:e=>d.request({url:"/api/users/login",method:"POST",data:e,needAuth:!1}),register:e=>d.request({url:"/api/users/register",method:"POST",data:e,needAuth:!1})},y={getCurrentUser:()=>d.request({url:"/api/users/me",method:"GET"}),getUserById:e=>c(exports,null,(function*(){try{if(console.log("获取用户信息, ID:",e),!e)throw console.error("获取用户信息失败: 无效的用户ID"),new Error("无效的用户ID");const t=yield d.request({url:`/api/users/${e}`,method:"GET"}),r=p(t);try{const o=u.index.getStorageSync("userId");if(o&&o!==e){const o=yield d.request({url:"/api/users/me",method:"GET"}),t=p(o);if(t&&t.following){const o=(Array.isArray(t.following)?t.following:[]).some((o=>o===e||"object"==typeof o&&o._id===e));console.log("检查关注状态:",{userId:e,isFollowing:o}),r&&(r.isFollowing=o)}}}catch(o){console.error("检查关注状态失败:",o)}return r}catch(o){if(console.error("获取用户信息失败:",o),500===o.statusCode||404===o.statusCode)return console.warn("服务器错误或用户不存在，返回默认用户数据"),{_id:e,username:"用户"+e.substring(0,4),nickname:"用户"+e.substring(0,4),avatar:"/static/images/default-avatar.png",bio:"该用户暂无介绍",isFollowing:!1};throw o}})),checkFollowStatus:e=>c(exports,null,(function*(){console.log("专门检查关注状态, 目标用户ID:",e);try{let s=u.index.getStorageSync("userId");if(!s)try{const e=u.index.getStorageSync("userInfo");if(e){const o=JSON.parse(e);s=o._id||o.id,console.log("从userInfo中获取当前用户ID:",s)}}catch(o){console.warn("解析userInfo失败:",o)}if(!s||s===e)return console.log("当前用户未登录或尝试检查自己，返回未关注状态"),{isFollowing:!1};console.log("开始直接检查关注状态, 当前用户:",s,"目标用户:",e);try{const o=yield d.request({url:`/api/users/${e}`,method:"GET"}),t=p(o);if(t&&void 0!==t.isFollowing)return console.log("从用户详情中获取到关注状态:",t.isFollowing),{isFollowing:t.isFollowing}}catch(t){console.warn("尝试从用户详情获取关注状态失败:",t)}try{const o=yield d.request({url:`/api/users/${s}/following`,method:"GET"}),t=p(o);if(console.log("成功获取关注列表:",(null==t?void 0:t.length)||0,"个用户"),Array.isArray(t)){const o=t.some((o=>o._id===e||"string"==typeof o&&o===e));return console.log("从关注列表直接检查关注状态:",{userId:e,isFollowing:o}),{isFollowing:o}}}catch(t){console.warn("尝试从关注列表检查关注状态失败:",t)}const a=yield d.request({url:"/api/users/me",method:"GET"}),n=p(a);if(console.log("获取当前用户信息成功, ID:",null==n?void 0:n._id),n&&n._id&&u.index.setStorageSync("userId",n._id),n&&"number"==typeof n.following){console.log("当前用户following字段是数字(关注数量):",n.following);try{const o=yield d.request({url:`/api/users/${n._id}/following`,method:"GET"}),t=p(o);if(console.log("通过API获取关注列表:",(null==t?void 0:t.length)||0,"个用户"),Array.isArray(t)){const o=t.some((o=>o._id===e||"string"==typeof o&&o===e));return console.log("最终检查关注状态结果:",{userId:e,isFollowing:o}),{isFollowing:o}}}catch(r){console.error("获取完整关注列表失败:",r)}}if(n&&Array.isArray(n.following)){const o=n.following;console.log("当前用户的关注列表长度:",o.length);let t=!1;for(const r of o){if(r===e){t=!0,console.log("找到关注关系(ID字符串):",e);break}if(r&&"object"==typeof r&&r._id===e){t=!0,console.log("找到关注关系(带_id的对象):",r);break}if(r&&"object"==typeof r&&r.userId===e){t=!0,console.log("找到关注关系(带userId的对象):",r);break}if(r&&"object"==typeof r&&r.user&&(r.user===e||"object"==typeof r.user&&r.user._id===e)){t=!0,console.log("找到关注关系(带user的对象):",r);break}}return console.log("关注状态检查结果:",{userId:e,isFollowing:t}),{isFollowing:t}}return console.log("未找到关注列表或为空，返回未关注状态"),{isFollowing:!1}}catch(t){return console.error("检查关注状态失败:",t),{isFollowing:!1}}})),updateProfile:e=>{console.log("准备发送用户更新数据:",e);const o=l({},e);return void 0===o.phone&&void 0!==e.phone&&(o.phone=e.phone),void 0===o.gender&&void 0!==e.gender&&(o.gender=e.gender),console.log("最终发送的用户数据:",o),d.request({url:"/api/users/me",method:"PUT",data:o}).then((e=>(e&&(e.phone||void 0===o.phone||(e.phone=o.phone),e.gender||void 0===o.gender||(e.gender=o.gender)),e)))},uploadAvatar:e=>new Promise(((o,t)=>{console.log("开始上传用户头像，文件路径:",e);const r=u.index.getStorageSync("token");return r?e?(console.log("开始上传文件, 路径:",e),void u.index.getFileInfo({filePath:e,success:function(s){console.log("文件信息:",s),u.index.uploadFile({url:g+"/api/users/avatar",filePath:e,name:"avatar",formData:{},header:{Authorization:`Bearer ${r}`},success:r=>{if(console.log("头像上传响应:",r),r.statusCode>=200&&r.statusCode<300)try{const e=JSON.parse(r.data);console.log("解析后的响应:",e);const t=e.data&&e.data.avatar||e.avatar||"/static/images/default-avatar.png";o({success:!0,avatar:t,data:{avatar:t}})}catch(s){console.error("解析响应失败:",s),o({success:!0,avatar:e,data:{avatar:e}})}else console.error("头像上传请求失败，状态码:",r.statusCode),console.error("失败响应:",r.data),t(new Error("上传失败: "+r.statusCode))},fail:e=>{console.error("头像上传请求发送失败:",e),t(new Error("网络请求失败: "+(e.errMsg||"未知错误")))}})},fail:function(e){console.error("获取文件信息失败:",e),t(new Error("文件读取失败: "+(e.errMsg||"未知错误")))}})):t(new Error("无效的文件路径")):t(new Error("请先登录"))})),getUserStats:e=>c(exports,null,(function*(){try{let o="/api/users/stats/me";e&&(o=`/api/users/${e}/stats`);const t=yield d.request({url:o,method:"GET"});return p(t)}catch(o){throw console.error("获取用户统计数据失败:",o),o}})),followUser:e=>c(exports,null,(function*(){try{const o=yield d.request({url:`/api/users/follow/${e}`,method:"POST"});return p(o)}catch(o){throw console.error("关注用户失败:",o),o}})),getFollowing:e=>c(exports,null,(function*(){try{const o=e||"me";console.log("请求关注列表:",`/api/users/${o}/following`);const t=yield d.request({url:`/api/users/${o}/following`,method:"GET"});return p(t)}catch(o){if(console.error("获取关注列表失败:",o),500===o.statusCode||404===o.statusCode||0===o.statusCode||!o.statusCode)return console.warn("服务器错误、网络错误或接口不存在，返回模拟关注列表数据"),[{_id:"mock-following-1",username:"宠物达人",nickname:"达人",avatar:"/static/images/default-avatar.png",bio:"分享养宠心得和小技巧",isFollowing:!0},{_id:"mock-following-2",username:"萌宠专家",nickname:"专家",avatar:"/static/images/default-avatar.png",bio:"喜欢一切毛茸茸的小动物",isFollowing:!0}];throw o}})),getFollowers:e=>c(exports,null,(function*(){try{const o=e||"me";console.log("请求粉丝列表:",`/api/users/${o}/followers`);const t=yield d.request({url:`/api/users/${o}/followers`,method:"GET"});return p(t)}catch(o){if(console.error("获取粉丝列表失败:",o),500===o.statusCode||404===o.statusCode||0===o.statusCode||!o.statusCode)return console.warn("服务器错误、网络错误或接口不存在，返回模拟粉丝列表数据"),[{_id:"mock-follower-1",username:"铲屎官小明",nickname:"小明",avatar:"/static/images/default-avatar.png",bio:"有一只可爱的小猫",isFollowing:!1},{_id:"mock-follower-2",username:"狗狗爱好者",nickname:"爱好者",avatar:"/static/images/default-avatar.png",bio:"养了三只不同品种的狗狗",isFollowing:!0}];throw o}})),getPetsByUser:e=>c(exports,null,(function*(){try{if(console.log("获取用户宠物列表, ID:",e),!e)throw console.error("获取用户宠物列表失败: 无效的用户ID"),new Error("无效的用户ID");const o=e||"me",t=yield d.request({url:`/api/users/${o}/pets`,method:"GET"});return p(t)}catch(o){return console.error("获取用户宠物列表失败:",o),500!==o.statusCode&&404!==o.statusCode&&0!==o.statusCode&&o.statusCode||console.warn("服务器错误、网络错误或宠物列表不存在，返回空列表"),[]}})),changePassword:e=>d.request({url:"/api/users/password",method:"PUT",data:e}),logout:()=>Promise.resolve({success:!0,message:"已退出登录"}),updateFullProfile:e=>{console.log("准备发送完整用户资料数据:",e);const o=i(l({},e),{phone:void 0!==e.phone?e.phone:"",gender:void 0!==e.gender?e.gender:"unknown"});console.log("最终发送的完整用户数据:",o);return d.request({url:"/api/users/updateProfile",method:"POST",data:o}).catch((e=>(console.warn("特殊API端点调用失败，尝试使用标准端点:",e),d.request({url:"/api/users/me",method:"PUT",data:o}).then((e=>(e&&(e.phone||void 0===o.phone||(e.phone=o.phone),e.gender||void 0===o.gender||(e.gender=o.gender)),e))))))}},w={getMyPets:()=>h((()=>d.request({url:"/api/pets",method:"GET"}))),getPetById:e=>h((()=>d.request({url:`/api/pets/${e}`,method:"GET"}))).then((e=>e)),addPet:e=>h((()=>d.request({url:"/api/pets",method:"POST",data:e}))).then((e=>e)),updatePet:(e,o)=>h((()=>d.request({url:`/api/pets/${e}`,method:"PUT",data:o}))).then((e=>e)),deletePet:e=>h((()=>d.request({url:`/api/pets/${e}`,method:"DELETE"}))).then((e=>e||{success:!0})),uploadPetAvatar:(e,o)=>new Promise(((t,r)=>{console.log("开始上传宠物头像，ID:",e,"文件路径:",o);const s=u.index.getStorageSync("token");return s?e?o?(console.log("准备上传文件:",o),o.includes("skip_validation=true")?(console.log("检测到跳过验证标志，直接上传文件"),void u.index.uploadFile({url:`${g}/api/pets/${e}/avatar`,filePath:o,name:"avatar",formData:{petId:e},header:{Authorization:`Bearer ${s}`},success:s=>{var a,n;if(s.statusCode>=200&&s.statusCode<300)try{const r=JSON.parse(s.data);t({success:!0,data:{pet:(null==(a=r.data)?void 0:a.pet)||r.pet||{_id:e,avatar:(null==(n=r.data)?void 0:n.avatar)||r.avatar||o}}})}catch(l){t({success:!0,data:{pet:{_id:e,avatar:o}}})}else r({success:!1,message:`上传失败: ${s.statusCode}`,error:s.data})},fail:e=>{r({success:!1,message:"网络请求失败",error:e})}})):void u.index.getFileInfo({filePath:o,success:function(a){if(console.log("宠物头像文件信息:",a),a.size>1048576)return r({success:!1,message:"图片大小不能超过1MB",statusCode:413});if(console.log("文件路径:",o),o.includes(".")){const e=o.substring(o.lastIndexOf(".")).toLowerCase(),t=[".jpg",".jpeg",".png",".gif",".webp",".bmp"];if(e&&e.length>1&&!t.includes(e))return console.log("不支持的文件类型:",e),r({success:!1,message:"请上传图片文件(jpg, png等)",statusCode:415})}if(a.type&&"image"!==a.type)return console.log("文件不是图片类型:",a.type),r({success:!1,message:"请上传图片文件",statusCode:415});u.index.uploadFile({url:`${g}/api/pets/${e}/avatar`,filePath:o,name:"avatar",formData:{petId:e},header:{Authorization:`Bearer ${s}`},success:a=>{var n,l;if(console.log("宠物头像上传原始响应:",a),a.statusCode>=200&&a.statusCode<300)try{const r=JSON.parse(a.data);console.log("解析的宠物头像上传响应:",r),t({success:!0,data:{pet:(null==(n=r.data)?void 0:n.pet)||r.pet||{_id:e,avatar:(null==(l=r.data)?void 0:l.avatar)||r.avatar||o}}})}catch(i){console.error("解析宠物头像上传响应失败:",i),t({success:!0,data:{pet:{_id:e,avatar:o}}})}else if(console.error("宠物头像上传请求失败:",a.statusCode,a.data),400===a.statusCode&&"string"==typeof a.data&&a.data.includes("Unexpected end of form"))if(console.log("检测到表单解析错误，尝试使用备用上传方式"),"undefined"!=typeof window&&window.document){console.log("检测到H5环境，使用H5专用备用方案");try{new FormData;o.startsWith("blob:")||o.startsWith("http")?(console.log("检测到blob或远程URL，尝试简化上传"),u.index.request({url:`${g}/api/pets/${e}/avatar/url`,method:"POST",data:{imageUrl:o,petId:e},header:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},success:function(r){r.statusCode>=200&&r.statusCode<300?t({success:!0,data:{pet:r.data.pet||{_id:e,avatar:r.data.avatar||o}}}):(console.log("备用上传失败，使用本地路径作为临时解决方案"),t({success:!0,data:{pet:{_id:e,avatar:o}}}))},fail:function(){console.log("所有上传方式均失败，返回本地路径"),t({success:!0,data:{pet:{_id:e,avatar:o}}})}})):(console.log("使用本地路径作为临时解决方案"),t({success:!0,data:{pet:{_id:e,avatar:o}}}))}catch(c){console.error("H5备用上传方案执行出错:",c),t({success:!0,data:{pet:{_id:e,avatar:o}}})}}else try{"function"==typeof u.index.getFileSystemManager?u.index.getFileSystemManager().readFile({filePath:o,encoding:"base64",success:function(r){u.index.request({url:`${g}/api/pets/${e}/avatar/base64`,method:"POST",data:{image:`data:image/jpeg;base64,${r.data}`,petId:e},header:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},success:function(r){r.statusCode>=200&&r.statusCode<300?t({success:!0,data:{pet:r.data.pet||{_id:e,avatar:r.data.avatar||o}}}):t({success:!0,data:{pet:{_id:e,avatar:o}}})},fail:function(){t({success:!0,data:{pet:{_id:e,avatar:o}}})}})},fail:function(){t({success:!0,data:{pet:{_id:e,avatar:o}}})}}):(console.log("当前环境不支持文件API，使用本地路径"),t({success:!0,data:{pet:{_id:e,avatar:o}}}))}catch(c){console.error("非H5环境备用方案执行出错:",c),t({success:!0,data:{pet:{_id:e,avatar:o}}})}else r({success:!1,message:`上传失败: ${a.statusCode}`,error:a.data})},fail:e=>{console.error("宠物头像上传网络请求失败:",e),e.errMsg&&(e.errMsg.includes("abort")||e.errMsg.includes("timeout")||e.errMsg.includes("network")||e.errMsg.includes("fail"))?(console.log("检测到网络传输错误，尝试使用备用上传方式"),u.index.uploadFile({url:`${g}/api/upload/test`,filePath:o,name:"test",formData:{test:!0},header:{Authorization:`Bearer ${s}`},success:()=>{r({success:!1,message:"文件上传失败，可能是文件太大或格式不兼容",error:e})},fail:()=>{r({success:!1,message:"网络连接不稳定，请稍后重试",error:e})}})):r({success:!1,message:"网络请求失败",error:e})}})},fail:function(e){console.error("获取文件信息失败:",e),r({success:!1,message:"文件读取失败",error:e})}})):r({success:!1,message:"文件路径无效",statusCode:400}):r({success:!1,message:"宠物ID无效",statusCode:400}):r({success:!1,message:"请先登录",statusCode:401})})),getPetsByUser:e=>c(exports,null,(function*(){try{const o=yield d.request({url:`/api/users/${e}/pets`,method:"GET"});return p(o)}catch(o){throw console.error("获取用户宠物失败:",o),o}})),analyzeImages:e=>new Promise(((o,t)=>{console.log("调用服务器端宠物分析API, 数据:",e);const r=u.index.getStorageSync("token"),s={Authorization:r?`Bearer ${r}`:"","Content-Type":"application/json"};u.index.request({url:`${g}/api/pet/analyze`,method:"POST",data:{imagePaths:e.imagePaths,userId:e.userId||""},header:s,success:e=>{var r;if(console.log("宠物分析API响应:",e),200===e.statusCode)o(e.data);else{const o=404===e.statusCode?"API端点不存在，请确认后端服务是否已实现此功能":(null==(r=e.data)?void 0:r.message)||`服务器错误(${e.statusCode})`;console.error("服务器返回错误:",o),t(new Error(o))}},fail:e=>{console.error("宠物分析请求失败:",e),t(new Error("网络请求失败，请检查网络连接"))}})})),getAnalysisHistory:e=>new Promise(((o,t)=>{u.index.request({url:`${g}/api/pet/analysis-history`,method:"GET",data:{userId:e},header:P(),success:e=>{200===e.statusCode?o(e.data):t(new Error(e.data.message||"获取历史记录失败"))},fail:e=>{console.error("获取分析历史失败:",e),t(e)}})})),uploadPetDailyPhoto:(e,o)=>(console.log("API - 开始上传宠物日常照片，ID:",e,"路径:",o),o.startsWith("blob:")?new Promise(((t,r)=>{try{console.log("API - 处理blob URL，准备转换为base64");const s=new Image;s.crossOrigin="anonymous",s.onload=()=>{try{const o=document.createElement("canvas");o.width=s.width,o.height=s.height;o.getContext("2d").drawImage(s,0,0);const a=o.toDataURL("image/jpeg",.9);console.log("API - 转换完成，准备以JSON格式发送"),fetch(`${g}/api/pets/${e}/daily-photo`,{method:"POST",headers:{Authorization:`Bearer ${u.index.getStorageSync("token")}`,"Content-Type":"application/json"},body:JSON.stringify({imageData:a,description:""})}).then((e=>{if(!e.ok)throw new Error(`上传失败: ${e.status}`);return e.json()})).then((e=>{console.log("API - 上传成功:",e),t(e)})).catch((e=>{console.error("API - 上传失败:",e),r(e)}))}catch(o){console.error("API - Canvas处理失败:",o),r(o)}},s.onerror=e=>{console.error("API - 图片加载失败:",e),r(new Error("图片加载失败"))},s.src=o}catch(s){console.error("API - 处理blob URL失败:",s),r(s)}})):new Promise(((t,r)=>{console.log("API - 处理本地文件上传"),u.index.uploadFile({url:`${g}/api/pets/${e}/daily-photo`,filePath:o,name:"photo",header:{Authorization:`Bearer ${u.index.getStorageSync("token")}`},success:e=>{let o;console.log("API - 照片上传成功");try{o="string"==typeof e.data?JSON.parse(e.data):e.data,t(o)}catch(s){console.error("API - 解析上传响应失败:",s),r(s)}},fail:e=>{console.error("API - 照片上传失败:",e),r(e)}})})))};function P(){const e=u.index.getStorageSync("token");return{Authorization:e?`Bearer ${e}`:"","Content-Type":"application/json"}}const v={auth:f,user:y,pet:w,community:{getPosts:e=>m((()=>d.request({url:"/api/community/posts",method:"GET",params:e}))),getFollowingPosts:(e=1,o=10)=>m((()=>d.request({url:"/api/community/posts/following",method:"GET",params:{page:e,limit:o,feed_type:"following"}}))),getMyPosts:e=>{console.log("开始获取我的帖子列表，参数:",e);const o=u.index.getStorageSync("token");return o?m((()=>d.request({url:"/api/community/posts/user/me",method:"GET",params:e,header:{Authorization:`Bearer ${o}`}}))).then((e=>(console.log("获取我的帖子成功，结果:",e),e?Array.isArray(e)?{data:e}:e.data||"object"!=typeof e?e:{data:[]}:{data:[]}))).catch((e=>{if(console.error("获取我的帖子列表失败，错误详情:",e),500===e.statusCode)return console.warn("服务器错误(500)，返回空结果以避免UI崩溃"),{data:[]};throw e})):(console.error("获取我的帖子失败: 未登录状态"),Promise.reject({message:"请先登录",statusCode:401}))},getPostById:e=>m((()=>d.request({url:`/api/community/posts/${e}`,method:"GET"}))),createPost:e=>{console.log("开始创建帖子，数据:",e);const o=u.index.getStorageSync("token");return o?new Promise(((t,r)=>{d.request({url:"/api/community/posts",method:"POST",data:e,header:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"}}).then((e=>{console.log("创建帖子成功，响应:",e),t(e)})).catch((e=>{console.error("创建帖子失败，错误:",e);let o="创建帖子失败";500===e.statusCode?o="服务器内部错误，请稍后再试":401===e.statusCode?o="登录已过期，请重新登录":400===e.statusCode&&(o="请求参数错误，请检查输入");let t=i(l({},e),{message:o,originalMessage:e.message});e.data&&e.data.error&&(t=i(l({},t),{detailedError:e.data.error,message:e.data.message||o}),console.warn("帖子创建详细错误:",t)),r(t)}))})):(console.error("创建帖子失败: 未登录状态"),Promise.reject({message:"请先登录",statusCode:401}))},updatePost:(e,o)=>{if(console.log("更新帖子，ID:",e,"数据:",o),!e||"string"!=typeof e||!e.trim())return console.error("更新帖子失败: 无效的帖子ID:",e),Promise.reject(new Error("无效的帖子ID"));o.images&&!Array.isArray(o.images)&&(o.images=[o.images],console.log("转换images为数组:",o.images));try{const t=encodeURIComponent(e.trim()),r=`${g}/api/community/posts/${t}`;return console.log("更新帖子URL:",r),new Promise(((e,t)=>{u.index.request({url:r,data:o,method:"PUT",header:{Authorization:`Bearer ${u.index.getStorageSync("token")}`,"Content-Type":"application/json"},success:o=>{const{statusCode:r,data:s}=o;r>=200&&r<300?(console.log("更新帖子成功，响应:",s),e(s)):(console.error("更新帖子失败，HTTP状态:",r,s),t({message:(null==s?void 0:s.message)||`更新失败(${r})`,statusCode:r,data:s}))},fail:e=>{console.error("更新帖子请求失败:",e),t({message:"网络请求失败",error:e})}})}))}catch(t){return console.error("构造更新帖子请求失败:",t),Promise.reject(t)}},deletePost:e=>{console.log("尝试删除帖子，ID:",e);const o=u.index.getStorageSync("token");return o?new Promise(((t,r)=>{d.request({url:`/api/community/posts/${e}`,method:"DELETE",header:{Authorization:`Bearer ${o}`}}).then((e=>{console.log("删除帖子成功，响应:",e),t(e)})).catch((e=>{console.error("删除帖子失败，错误:",e);let o="删除帖子失败";500===e.statusCode?o="服务器内部错误，请稍后再试":401===e.statusCode?o="没有权限删除此帖子":404===e.statusCode&&(o="帖子不存在或已被删除"),r(i(l({},e),{message:o,originalMessage:e.message}))}))})):(console.error("删除帖子失败: 未登录状态"),Promise.reject({message:"请先登录",statusCode:401}))},likePost:e=>d.request({url:`/api/community/posts/${e}/like`,method:"POST"}),unlikePost:e=>d.request({url:`/api/community/posts/${e}/like`,method:"DELETE"}),getComments:(e,o)=>m((()=>d.request({url:`/api/community/posts/${e}/comments`,method:"GET",params:o}))),addComment:(e,o)=>d.request({url:`/api/community/posts/${e}/comment`,method:"POST",data:o}),deleteComment:(e,o)=>d.request({url:`/api/community/posts/${e}/comment/${o}`,method:"DELETE"}),getImageUploadUrl:e=>`${g}/api/community/posts/${e}/image`,uploadPostImage:(e,o)=>new Promise(((t,r)=>{console.log("开始上传帖子图片到服务器:",o),u.index.uploadFile({url:`${g}/api/community/posts/${e}/image`,filePath:o,name:"image",header:{Authorization:`Bearer ${u.index.getStorageSync("token")}`},success:e=>{if(console.log("图片上传响应:",e),e.statusCode>=200&&e.statusCode<300)try{const s=JSON.parse(e.data);console.log("解析的图片上传响应:",s);const a=s.url||s.imageUrl||s.data&&(s.data.url||s.data.imageUrl)||o;if(a)console.log("成功获取图片URL:",a),t({success:!0,url:a,message:"图片已上传成功"});else{if(console.error("服务器响应中未找到图片URL:",s),s&&!1===s.success)return void r(new Error(s.message||"图片上传失败"));t({success:!0,url:o,message:"已上传但未获取服务器URL，使用本地路径"})}}catch(s){console.error("解析图片上传响应失败:",s),t({success:!0,url:o,message:"图片已上传但解析响应失败"})}else console.error(`图片上传失败，状态码: ${e.statusCode}`),console.error("错误响应:",e.data),r(new Error(`图片上传失败: ${e.statusCode}`))},fail:s=>{console.error("图片上传请求失败:",s),console.warn("图片上传失败，尝试使用本地路径"),d.request({url:`${g}/api/community/posts/${e}`,method:"PUT",data:{images:[o]}}).then((()=>{console.log("已使用本地路径作为后备方案更新帖子"),t({success:!0,url:o,message:"使用本地图片路径(上传失败)"})})).catch((e=>{console.error("使用本地路径更新帖子也失败:",e),r(new Error("图片上传和更新都失败: "+(s.errMsg||"未知错误")))}))}})}))},walk:{getMyWalks:e=>m((()=>d.request({url:"/api/walks",method:"GET",params:e}))),getWalkById:e=>m((()=>d.request({url:`/api/walks/${e}`,method:"GET"}))),startWalk:e=>d.request({url:"/api/walks/start",method:"POST",data:e}),endWalk:(e,o)=>d.request({url:`/api/walks/${e}/end`,method:"POST",data:o}),deleteWalk:e=>d.request({url:`/api/walks/${e}`,method:"DELETE"}),updateWalkPoint:(e,o)=>d.request({url:`/api/walks/${e}/point`,method:"POST",data:o})},location:{updateLocation:e=>m((()=>d.request({url:"/api/locations/update",method:"PUT",data:e}))),getNearbyUsers:e=>m((()=>d.request({url:"/api/locations/nearby",method:"GET",params:e}))),toggleLocationSharing:e=>m((()=>d.request({url:"/api/locations/sharing",method:"PUT",data:e}))),getLocationSharingStatus:()=>m((()=>d.request({url:"/api/locations/sharing",method:"GET"}))),getUserPets:e=>m((()=>d.request({url:`/api/pets/user/${e}`,method:"GET"}))),checkFollowStatus:e=>m((()=>d.request({url:`/api/users/follow/check/${e}`,method:"GET"})))},chat:{sendNearbyMessage:e=>c(exports,null,(function*(){try{const o=yield d.request({url:"/api/chat/nearby",method:"POST",data:e});return p(o)}catch(o){throw console.error("发送附近消息失败:",o),o}})),sendCityMessage:e=>c(exports,null,(function*(){try{const o=yield d.request({url:"/api/chat/city",method:"POST",data:e});return p(o)}catch(o){throw console.error("发送城市消息失败:",o),o}})),getNearbyMessages:e=>c(exports,null,(function*(){try{const o=yield d.request({url:"/api/chat/nearby",method:"GET",params:e});return p(o)}catch(o){throw console.error("获取附近消息失败:",o),o}})),getCityMessages:e=>c(exports,null,(function*(){try{const o=yield d.request({url:"/api/chat/city",method:"GET",params:e});return p(o)}catch(o){throw console.error("获取城市消息失败:",o),o}})),sendPrivateMessage:e=>c(exports,null,(function*(){try{if(!e.receiverId||!e.content)throw new Error("发送消息需要接收者ID和消息内容");const o=yield d.request({url:"/api/chat/private",method:"POST",data:e});return p(o)}catch(o){throw console.error("发送私聊消息失败:",o),o}})),getPrivateMessages:e=>c(exports,null,(function*(){try{if(!e.targetUserId)throw new Error("获取私聊消息需要目标用户ID");const o=yield d.request({url:"/api/chat/private",method:"GET",params:e});return p(o)}catch(o){throw console.error("获取私聊消息失败:",o),o}})),markMessagesAsRead:e=>c(exports,null,(function*(){try{if(!e)throw new Error("标记消息已读需要目标用户ID");const o=yield d.request({url:`/api/chat/read/${e}`,method:"POST"});return p(o)}catch(o){throw console.error("标记消息已读失败:",o),o}})),getUnreadCount:()=>c(exports,null,(function*(){try{const e=yield d.request({url:"/api/chat/unread",method:"GET"});return p(e)}catch(e){throw console.error("获取未读消息数量失败:",e),e}}))},upload:{uploadImage:(e,o={})=>new Promise(((t,r)=>{if(console.log("开始上传图片, 文件路径:",e),!e)return console.error("上传失败: 无效的文件路径"),r(new Error("无效的文件路径"));const s=u.index.getStorageSync("token");u.index.uploadFile({url:`${g}/api/upload/image`,filePath:e,name:"file",formData:o,header:{Authorization:s?`Bearer ${s}`:""},success:o=>{if(console.log("图片上传响应:",o),o.statusCode>=200&&o.statusCode<300)try{const r=JSON.parse(o.data);console.log("解析上传响应:",r);const s=r.url||r.imageUrl||r.data&&(r.data.url||r.data.imageUrl)||e;t({success:!0,url:s,path:s})}catch(s){console.error("解析响应失败:",s),t({success:!0,url:e,path:e})}else console.error("图片上传失败, 状态码:",o.statusCode),r(new Error(`上传失败: ${o.statusCode}`))},fail:e=>{console.error("图片上传请求失败:",e),r(e)}})}))}};exports.api=v,exports.auth=f,exports.pet=w,exports.user=y;
