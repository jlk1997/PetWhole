"use strict";var t=(t,r,n)=>new Promise(((e,o)=>{var a=t=>{try{c(n.next(t))}catch(r){o(r)}},i=t=>{try{c(n.throw(t))}catch(r){o(r)}},c=t=>t.done?e(t.value):Promise.resolve(t.value).then(a,i);c((n=n.apply(t,r)).next())}));exports.generateSignature=function(r,n,e){return t(this,null,(function*(){const o=function(t){const r="abcdefghijklmnopqrstuvwxyz0123456789";let n="";for(let e=0;e<t;e++)n+=r.charAt(Math.floor(36*Math.random()));return n}(8),a=Math.floor(Date.now()/1e3).toString(),i=JSON.stringify(n),c=r+i+o+a;try{const r=yield function(r,n){return t(this,null,(function*(){try{const t=new TextEncoder,e=t.encode(n),o=t.encode(r),a=yield window.crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),i=yield window.crypto.subtle.sign("HMAC",a,o);return Array.from(new Uint8Array(i)).map((t=>t.toString(16).padStart(2,"0"))).join("")}catch(t){throw console.error("HMAC计算失败 (Web Crypto API)",t),t}}))}(c,e),n=function(t){const r=Array.from(t).map((t=>String.fromCharCode(t))).join("");return btoa(r)}(new Uint8Array(r.match(/.{1,2}/g).map((t=>parseInt(t,16)))));return console.log("签名计算成功",{nonce:o,timestamp:a,signature:n,signStr:c}),{signature:n,timestamp:a,nonce:o}}catch(s){throw console.error("签名生成失败:",s),s}}))};
