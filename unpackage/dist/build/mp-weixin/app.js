"use strict";var e=(e,o,s)=>new Promise(((t,n)=>{var r=e=>{try{a(s.next(e))}catch(o){n(o)}},i=e=>{try{a(s.throw(e))}catch(o){n(o)}},a=e=>e.done?t(e.value):Promise.resolve(e.value).then(r,i);a((s=s.apply(e,o)).next())}));Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const o=require("./common/vendor.js"),s=require("./store/user.js"),t=require("./store/pet.js"),n=require("./utils/api.js"),r=require("./utils/iconManager.js"),i=require("./config/index.js");Math;const a={name:"IconLoader",emits:["update-applied"],setup(s,{emit:t}){const n=o.ref(!1),i=o.ref(0);let a=null;const c=o.ref(0),l=()=>e(this,null,(function*(){try{yield r.loadIconVersions(),console.log("图标版本信息加载完成")}catch(e){console.error("加载图标版本信息失败:",e)}})),d=()=>e(this,null,(function*(){const e=Date.now();if(!(e-c.value<6e5)){c.value=e;try{if(yield r.checkAllIconsUpdate()){const e=document.querySelectorAll('img[src*="/static/"]');i.value=e.length,i.value>0&&(n.value=!0)}}catch(o){console.error("检查图标更新失败:",o)}}}));return o.onMounted((()=>e(this,null,(function*(){yield l(),yield d(),a=setInterval(d,18e5)})))),o.onBeforeUnmount((()=>{a&&clearInterval(a)})),{showUpdate:n,pendingUpdates:i,applyUpdates:()=>{try{const e=r.refreshDOMIcons();console.log(`已刷新 ${e} 个图标`),n.value=!1,i.value=0,t("update-applied",e)}catch(e){console.error("应用图标更新失败:",e)}}}}};const c={components:{IconLoader:o._export_sfc(a,[["render",function(e,s,t,n,r,i){return o.e({a:n.showUpdate},n.showUpdate?{b:o.t(n.pendingUpdates),c:o.o(((...e)=>n.applyUpdates&&n.applyUpdates(...e)))}:{})}],["__scopeId","data-v-f9a36ccb"]])},onLaunch:function(){console.log("App Launch");const e=s.useUserStore(),n=t.usePetStore(),r=i.config.BASE_API_URL;if(console.log("初始化BASE_URL:",r),o.index.setStorageSync("BASE_URL",r),this.initApi(),o.index.getStorageSync("token")){try{const s=o.index.getStorageSync("userInfo");if(s){const o=JSON.parse(s);o&&o._id&&(e.user=o,console.log("从本地存储初始化用户信息:",o.nickname,"头像:",o.avatar))}}catch(a){console.error("从本地存储恢复用户信息失败:",a)}e.init().then((()=>(console.log("用户状态初始化成功","用户信息:",e.user),e.fetchUserStats()))).catch((e=>{console.error("初始化用户状态失败:",e)}))}n.restorePetState?n.restorePetState():console.warn("宠物状态恢复方法不存在"),o.index.addInterceptor("request",{fail:e=>{console.error("请求拦截到错误:",e),(404===e.statusCode||e.errMsg&&e.errMsg.includes("404"))&&(console.warn("API请求404错误:",e.errMsg),o.index.showToast({title:"网络请求失败，请稍后再试",icon:"none",duration:2e3}))}})},onShow:function(){console.log("App Show");const e=s.useUserStore();o.index.getStorageSync("token")&&!e.user&&(console.log("App Show: 检测到token但用户信息不存在，尝试重新初始化"),e.init().catch((e=>{console.error("重新初始化用户状态失败:",e)}))),o.index.$api||(console.warn("API尚未初始化，尝试重新初始化"),this.initApi())},onHide:function(){console.log("App Hide")},methods:{initApi(){try{o.index.$api?console.log("API已初始化，无需再次初始化"):(console.log("正在初始化API..."),o.index.$api=n.api,this.globalData.apiReady=!0,console.log("API初始化成功，当前API对象:",Object.keys(o.index.$api)),o.index.$api.community||(console.warn("社区API不存在，创建空对象"),o.index.$api.community={getPosts:()=>Promise.resolve([]),getMyPosts:()=>Promise.resolve([]),createPost:()=>Promise.resolve({success:!0}),getPostById:()=>Promise.resolve(null)}),o.index.$api.pet||(console.warn("宠物API不存在，创建空对象"),o.index.$api.pet={getPets:()=>Promise.resolve([]),getPetById:()=>Promise.resolve(null),createPet:()=>Promise.resolve({success:!0})}))}catch(e){console.error("API初始化失败:",e),this.globalData.apiReady=!1,o.index.$api={community:{getPosts:()=>Promise.resolve([]),getMyPosts:()=>Promise.resolve([]),createPost:()=>Promise.resolve({success:!0}),getPostById:()=>Promise.resolve(null)},pet:{getPets:()=>Promise.resolve([]),getPetById:()=>Promise.resolve(null),createPet:()=>Promise.resolve({success:!0})},auth:{login:()=>Promise.resolve({token:"mock-token"}),register:()=>Promise.resolve({success:!0}),resetPassword:()=>Promise.resolve({success:!0})}},setTimeout((()=>{this.initApi()}),5e3)}},handleIconUpdated(e){console.log(`应用图标更新完成，更新了 ${e} 个图标`),o.index.showToast({title:`更新了 ${e} 个图标`,icon:"success"})}},globalData:{apiReady:!1}};if(!Array){(o.resolveComponent("router-view")+o.resolveComponent("IconLoader"))()}const l=o._export_sfc(c,[["render",function(e,s,t,n,r,i){return{a:o.o(i.handleIconUpdated)}}]]);function d(){const e=o.createSSRApp(l),s=o.createPinia();return e.use(s),o.index.$api=n.api,e.config.errorHandler=(e,s,t)=>{if(console.error("Vue Error:",e),e.message&&e.message.includes("Failed to fetch dynamically imported module")){console.warn("动态导入模块失败，模块路径可能有误:",e.message);const s=e.message.match(/http:\/\/localhost:5173\/(.*?)(\?|$)/);s&&s[1]&&(console.warn("无法加载页面:",s[1]),o.index.showToast({title:"页面加载失败",icon:"none",duration:2e3}),setTimeout((()=>{o.index.navigateBack({fail:()=>{o.index.switchTab({url:"/pages/index/index"})}})}),1500))}else(404===e.status||e.message&&e.message.includes("404"))&&(console.warn("API请求404错误:",e.message),o.index.showToast({title:"网络请求失败，请稍后再试",icon:"none"}))},{app:e}}o.index.$api=n.api,d().app.mount("#app"),exports.createApp=d;
